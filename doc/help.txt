# usage: say <text>
# example: say 'articulating splines'
# intended for stdout logging and information about current actions
# usage: warn <text>
# example: warn 'that is one doomed space marine'
# same as `say` except it sends to stderr
# usage: sayenv <VARNAME>
# example: sayenv path
# dump the name and contents of an environment variable in say format
# usage: colorfg <color>
# example: colorfg 97; echo "some lavendarish text"
# easily change the foreground (text) to one of 256 colors
# the 16 standard colors are also addressable by name
# usage: colorbg <color>
# example: colorbg 22; echo "text with a dark green background"
# easily change the foreground (text) to one of 256 colors
# the 16 standard colors are also addressable by name
# usage: colorreset
# example: echo "$(colorfg red)prompt> $(colorreset)"
# return console to default color settings
# usage: ansigoto <column>
# example: echo overwrite this; ansigoto 0; echo blah blah blah
# move the cursor to a column on the current line
# usage: ansieol
# example: echo '| good for borders'; ansieol; echo '|'
# sends the cursor to the end of the line
# usage: ansiup <count>
# example: echo "loading..."; load file; ansiup 1; ansigoto 0; echo 'done!     '
# sends the cursor up the specified number of lines
# usage: displayname <path>
# example: displayname "$(pwd)"
# takes a path and generates "last_folder/filename" string
# usage: scriptname
# example: echo "the current script is $(scriptname)"
# formats the current script name for display
# usage: scriptcaller
# example: scriptcaller
# determine the currently executing script via caller
# !! can't be nested in other functions !!
# usage: scriptsame
# example: if scriptsame; then echo "this is the primary script"; fi
# for conditionals, determines if caller is the same as the main parent script
# usage: include <script>
# example: include "time.bash"
# source a script only once
# usage: load_nonfatal <script>
# example: load_nonfatal missing_script.sh
# source a script once or more, warning on errors
# usage: load <script>
# example: load vital_script.sh
# source a script once or more, exiting if it is missing or returns an error
# usage: bash_trace
# example: bash_trace
# for debugging bash functions
# usage: _set_scriptcurrent
# example: _set_scriptcurrent
# used internally to set the current script global
# if this gets broken all hell breaks loose
# usage: ok <message>
# example: ok 'all good!'
# formatted success message and exit
# message is optional
# usage: die <message>
# example: die 'hit the road jack'
# formatted failure message and exit
# message is optional
# usage: die_status <status> [message]
# example: die_status 255 "file not found"
# formatted failure message and exit with specified status code
# usage: quit_status <status> [message]
# example: quit_status $? "last command exited"
# automatically selects the correct exit function based on context
# usage: ts
# example: echo "The time is $(ts)
#   local timestamp for output
# usage: ts_file
# example: curl package.pkg -o "package_$(ts_file).pkg"
# timestamp for filenames, in UTC for consistency
# usage: ts_unix
# example: start_time="$(ts_unix)"
# unix timestamp with nanoseconds
# required by elapsed()
# usage: realpath <path>
# attempts to resolve all symlinks until the origin path is discovered
# circular symlinks will keep it looping forever
# usage: elapsed <start_time> <end_time>
# takes two unix timestamps with nanoseconds
# returns the difference in human-readable format
# usage: safe_cd <path>
# example: safe_cd /mnt/network_drive
# if cd fails then we should exit
# fixes a common shellcheck complaint
# usage: command_exists <command_name>
# example: if command_exists lsb_release; lsb_release -ds; fi
# used in conditionals to determine presence of a command or executable
# usage: run "title" <command> [args]
# example: run "compile" clang thing.c
# display command to run, confirm it exists, run it, output a warning on failure
# usage: run_or_die "title" <command> [args]
# example: run_or_die "download dependencies" curl -O package.pkg
# as run, but die if command missing or exits with an error
# usage: gfix <command> <opts>
# example: gfix readlink -m .
# will try to prefix the command with a g
# newer versions of macOS have broken the ability to reliably modify the path in subshells
